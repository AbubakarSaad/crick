FORMAT: 1A
HOST: https://api.crick.io/

# Crick API

This document describes the Crick.io API.

# Group Crick API for Web

This is the Crick API for the main Crick.io web application.
The authentication layer uses Auth0 with a JSON Web Token.

## Users [/users]

This endpoint allows to manage Crick users.

It requires a `Authorization` header with a `Bearer` JSON Web Token,
otherwise the response will be a `401 Unauthorized`.

### Get current user's profile [GET /users/me]

+ Request
    + Headers
    
            Accept: application/json
            Authorization: Bearer <Auth0 JWT token>

+ Response 200 (application/json)

        {
            "id": "15178b45-0646-4b1e-84f6-ca6a5d7ba2bb",
            "login": "willdurand",
            "token": "xyz==",
            "avatar_url": "https://bitbucket.org/account/willdurand/avatar/32/"
        }

+ Response 401 (application/json)

        {
            "detail": "Malformed JWT token (claims)",
            "title": "Unauthorized"
        }

+ Response 401 (application/json)

        {
            "detail": "User not found",
            "title": "Unauthorized"
        }

## Projects [/projects]

This endpoint allows to manage Crick projects, scoped by user.

It requires a `Authorization` header with a `Bearer` JSON Web Token,
otherwise the response will be a `401 Unauthorized`.

### List all user's projects [GET]

+ Request
    + Headers
    
            Accept: application/json
            Authorization: Bearer <Auth0 JWT token>

+ Response 200 (application/json)

        {
            "projects": [
                {
                    "id": "26fb1e8c-b559-4d6e-a9a7-e9092ac5fb38",
                    "name": "project 1"
                },
                {
                    "id": "142d08ac-8244-4b43-b04a-4d0c18a93a6e",
                    "name": "project 2"
                }
            ]
        }

+ Response 401 (application/json)

        {
            "detail": "User not found",
            "title": "Unauthorized"
        }

### List all user's frames for a project [GET /projects/{id}/frames]

+ Parameters
    + id: `26fb1e8c-b559-4d6e-a9a7-e9092ac5fb38` (UUID) - ID of the project

+ Response 200 (application/json)

        {
            "frames": [
                {
                    "id": "5b37098a-c971-4956-92a3-5a81fc0b342b",
                    "start_at": "2016-10-21T09:43:36Z",
                    "end_at": "2016-10-21T12:03:47Z",
                    "project": "project 1",
                    "tags": ["tag1", "tag 2"]
                },
                {
                    "id": "5b37098a-c971-4956-92a3-5a81fc0b3aaa",
                    "start_at": "2016-10-22T09:43:36Z",
                    "end_at": "2016-10-22T12:03:47Z",
                    "project": "project 1",
                    "tags": []
                }
            ]
        }

+ Response 400 (application/json)

        {
            "detail": "Invalid request",
            "title": "Bad Request"
        }

+ Response 401 (application/json)

        {
            "detail": "User not found",
            "title": "Unauthorized"
        }

+ Response 404 (application/json)

        {
            "detail": "Unknown project",
            "title": "Not Found"
        }


## Teams [/teams]

This endpoint allows to manage Crick teams, scoped by user.

It requires a `Authorization` header with a `Bearer` JSON Web Token,
otherwise the response will be a `401 Unauthorized`.

### List all user's teams [GET]

+ Request
    + Headers
    
            Accept: application/json
            Authorization: Bearer <Auth0 JWT token>

+ Response 200 (application/json)

        {
            "teams": [
                {
                    "id": "26fb1e8c-b559-4d6e-a9a7-e9092ac5fb38",
                    "name": "Team TailorDev",
                    "projects": [
                        "crick",
                        "watson"
                    ],
                    "users": [
                        {
                            "id": "15178b45-0646-4b1e-84f6-ca6a5d7ba2bb",
                            "login": "willdurand",
                            "avatar_url": "https://bitbucket.org/account/willdurand/avatar/32/"
                        },
                        {
                            "id": "15178b45-0646-4b1e-84f6-ca6a5d7battt",
                            "login": "jmaupetit",
                            "avatar_url": "https://bitbucket.org/account/jmaupetit/avatar/32/"
                        }
                    ]
                },
                {
                    "id": "142d08ac-8244-4b43-b04a-4d0c18a93a6e",
                    "name": "Team Rocket",
                    "projects": [],
                    "users": [
                        {
                            "id": "15178b45-0646-4b1e-84f6-ca6a5d7ba2bb",
                            "login": "willdurand",
                            "avatar_url": "https://bitbucket.org/account/willdurand/avatar/32/"
                        }
                    ]
                }
            ]
        }

### Create a team [POST]

+ Request
    + Headers
    
            Accept: application/json
            Content-type: application/json
            Authorization: Bearer <Auth0 JWT token>

    + Body
    
            {
                "name": "My Team Name",
                "user_ids": [
                    "15178b45-0646-4b1e-84f6-ca6a5d7battt"
                ],
                "projects": [
                    "that-project"
                ]
            }

+ Response 201 (application/json)

            {
                "id": "26fb1e8c-xxxx-yyyy-a9a7-e9092ac5fb38"
            }

### Update a team [PUT /teams/{id}]

+ Parameters
    + id: `26fb1e8c-xxxx-yyyy-a9a7-e9092ac5fb38` (UUID) - ID of the team

+ Request
    + Headers
    
            Accept: application/json
            Content-type: application/json
            Authorization: Bearer <Auth0 JWT token>

    + Body
    
            {
                "id": "26fb1e8c-xxxx-yyyy-a9a7-e9092ac5fb38",
                "name": "My team name",
                "user_ids": [
                    "15178b45-0646-4b1e-84f6-ca6a5d7battt"
                ],
                "projects": [
                    "that-project",
                    "yet-another-project"
                ]
            }

+ Response 204 (application/json)


# Group Crick API for Watson

This is the Crick API used by Watson. The authentication layer uses
a API token, generated by Crick.

## Projects [/watson/projects]

This endpoint requires a `Authorization` header with a `Token` API token,
otherwise the response will be a `401 Unauthorized`.

### Retrieve all user's projects [GET]

+ Request
    + Headers
    
            Accept: application/json
            Authorization: Token <API token>

+ Response 200 (application/json)

        {
            "projects": [
                {
                    "id": "26fb1e8c-b559-4d6e-a9a7-e9092ac5fb38",
                    "name": "project 1"
                },
                {
                    "id": "142d08ac-8244-4b43-b04a-4d0c18a93a6e",
                    "name": "project 2"
                }
            ]
        }

+ Response 400 (application/json)

        {
            "detail": "Invalid or missing Authorization header",
            "title": "Bad Request"
        }

+ Response 401 (application/json)

        {
            "detail": "User not found",
            "title": "Unauthorized"
        }

## Frames [/watson/frames{?last_sync}]

This endpoint requires a `Authorization` header with a `Token` API token,
otherwise the response will be a `401 Unauthorized`.

+ Parameters
    + last_sync: `2006-01-02T15:04:05-07:00` (date, optional) - Watson last sync date.

### Retrieve all user's frames [GET]

+ Request
    + Headers
    
            Accept: application/json
            Authorization: Token <API token>

+ Response 200 (application/json)

        {
            "frames": [
                {
                    "id": "5b37098a-c971-4956-92a3-5a81fc0b342b",
                    "start_at": "2016-10-21T09:43:36Z",
                    "end_at": "2016-10-21T12:03:47Z",
                    "project": "project 1",
                    "tags": ["tag1", "tag 2"]
                },
                {
                    "id": "5b37098a-c971-4956-92a3-5a81fc0b3aaa",
                    "start_at": "2016-10-22T09:43:36Z",
                    "end_at": "2016-10-22T12:03:47Z",
                    "project": "project 1",
                    "tags": []
                }
            ]
        }

+ Response 400 (application/json)

        {
            "detail": "Invalid or missing Authorization header",
            "title": "Bad Request"
        }

+ Response 401 (application/json)

        {
            "detail": "User not found",
            "title": "Unauthorized"
        }

### Push (not yet synchronized) user's frames [POST /watson/frames/bulk]

+ Request
    + Headers
    
            Accept: application/json
            Content-type: application/json
            Authorization: Token <API token>
            
    + Body
    
            [
                {
                    "id": "5b37098a-c971-4956-92a3-5a81fc0b3qqq",
                    "start_at": "2017-10-21T09:43:36Z",
                    "end_at": "2017-10-21T12:03:47Z",
                    "project": "project 2",
                    "tags": ["tag XYZ"]
                },
                {
                    "id": "5b37098a-c971-4956-92a3-5a81fc0b3zzz",
                    "start_at": "2017-10-22T09:43:36Z",
                    "end_at": "2017-10-22T12:03:47Z",
                    "project": "project 1",
                    "tags": []
                }
            ]
  
+ Response 201